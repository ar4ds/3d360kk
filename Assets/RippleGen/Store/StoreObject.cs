// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Reflection;
using UnityEngine;

namespace RippleGen.Store
{
    public class StoreObject<T> : RippleGen.Core.GenObject where T : new()
    {
        private static T instance;
        public static T Instance{
            get {
                if (instance == null) {
                    instance = new T();
                }
                return instance;
            }
        }

        public bool IsCached{
            get{
                return isCached;
            }
        }
        private bool isCached = false;

        protected StoreObject() {
            string path = StorePath();
            if (File.Exists(path)) {
                isCached = true;
                FileStream stream = File.Open(path, FileMode.Open);
                Load(stream);
                stream.Close();
            }
        }

        protected virtual void Load(Stream stream){}
        public virtual void Store() {Store(null); }
        public void Store(string value) {
            if (!Directory.Exists(Dir()))
            {
                Directory.CreateDirectory(Dir());
            }
            Write(StorePath(), value);
            isCached = true;
        }
        protected virtual void Write(string path, string value) {
            if (value != null)
            {
                File.WriteAllText(path, value);
            }
        }

        private string Dir(){return Application.persistentDataPath + "/store/";}
        private string StorePath() {return Dir() + FileName();}
        protected virtual string FileName() { return "store"; }

        public void Delete(){ 
            if (File.Exists(StorePath())) 
                File.Delete(StorePath()); 
            isCached = false;
        }
        public virtual bool IsExpired{ get{ return false; } }
    }
}

