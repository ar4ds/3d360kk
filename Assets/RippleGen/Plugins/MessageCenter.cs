// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using RippleGen.Extends;

using UnityEngine;

namespace RippleGen.Plugins
{
    public class MessageCenter : RippleGen.Core.Plugin
    {
        public delegate void TrigerAction(object[] par);

        private static MessageCenter instance;
        public static MessageCenter Instance{
            get { 
                if (instance == null)
                {
                    instance = new MessageCenter();
                }
                return instance;
            }
        }
        struct DelayAction {
            public object[] ParamObjects;
            public TrigerAction  Action;

            public DelayAction(TrigerAction action, object[] paramObject) {
                ParamObjects = paramObject;
                Action = action;
            }
        }

        Hashtable listeners = new Hashtable();
        List<DelayAction> willDo = new List<DelayAction>();

        public void Add(string key, TrigerAction action) {
            List<TrigerAction> arr = listeners[key] as List<TrigerAction>;
            if (arr == null) {
                arr = new List<TrigerAction>();
                listeners.Add(key, arr);
            }
            if (!arr.Contains(action))
                arr.Add(action);
        }

        public void Remove(string key, TrigerAction action) {
            List<TrigerAction> arr = listeners[key] as List<TrigerAction>;
            arr.Remove(action);
        }

        public void Trigger(string key, params object[] pars) {
            List<TrigerAction> arr = listeners[key] as List<TrigerAction>;
            if (arr != null) {
                foreach(TrigerAction action in arr) {
                    action(pars);
                }
            }
        }

        public void TriggerOnMainTread(string key, params object[] pars) {
            List<TrigerAction> arr = listeners[key] as List<TrigerAction>;
            if (arr != null) {
                arr.ForEach((run)=>{
                    willDo.Add(new DelayAction(run, pars));
                });
            }
        }

        public override void Update()
        {
            if (willDo.Count > 0) {
                willDo.ForEach((delayAction)=>{
                    delayAction.Action.Method.Invoke(delayAction.Action.Target, delayAction.ParamObjects);
                });
                willDo.Clear();
            }
            base.Update();
        }
    }
}

